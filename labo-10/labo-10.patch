From 1ef09f24f0c6b89fa3f1c7d056c95e1a2660ef8d Mon Sep 17 00:00:00 2001
From: "kevin.auberson" <kevin.auberson@heig-vd.ch>
Date: Tue, 5 Dec 2023 17:09:34 +0100
Subject: [PATCH] Lab finish

---
 rapport.md           | 22 +++++++++++++++
 so3/arch/arm32/mmu.c |  2 +-
 usr/src/memory.c     | 12 +++++++++++-
 3 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/rapport.md b/rapport.md
index e69de29..8989a97 100644
--- a/rapport.md
+++ b/rapport.md
@@ -0,0 +1,15 @@
+# Rapport lab10 - Kevin Auberson
+## Où se trouve le code gérant l’allocation dynamique dans le noyau (gestion du tas) ?
+so3/mm/heap.c
+
+## Quel est l’algorithme de gestion mémoire utilisé dans ce contexte ?
+Il s'agit de l'algorithme quick-fit comme énoncée dans l'entête de fonction d'initialisation du tas. (so3/mm/heap.c l.45)
+Comme nous le voyons dans la fonction heap_size avec 2 initialisation de structure mem_chunk_t. Il s'agit bien d'une liste à deux dimension.
+
+## Où se trouve le code de la gestion de la MMU ?
+L'initialisation et la configuration de la MMU s'effectue dans ce fichier. (so3/mm/memory.c)
+
+La MMU est gérée dans (so3/arch/arm32/mmu.c), car dans notre cas l'architecture est de 32bits.
+
+## Que constate-on au niveau des adresses physique et virtuelle ? Pourquoi ?
+La mémoire virtuelle d'un programme conserve généralement la même adresse entre ses différentes exécutions. 
+Chaque application dispose d'une portion de la mémoire allouée par la MMU (Unité de Gestion de Mémoire) lors de son exécution, lui offrant un espace isolé dans la mémoire et permettant à l'OS de protéger cet espace des autres programmes en cas de débordement de mémoire. 
+En général, l'adresse de départ du 'heap' se situe après les données fixes du programme, ce qui explique la stabilité de l'adresse virtuelle entre chaque exécution.
 
+Quant à l'adresse physique, seuls les premiers bits changent, tandis que les derniers bits représentent l'offset dans la mémoire pour ce 'heap'. 
+Ces derniers bits correspondent souvent aux derniers bits de l'adresse virtuelle. 
+Les premiers bits de l'adresse physique varient à chaque exécution, correspondant à l'index de la page mémoire devant être traduite par la MMU pour les accès à la RAM. 
+Ainsi, lors du lancement d'un nouveau programme, il faut trouver un nouveau bloc mémoire disponible, ce qui n'est pas garanti à chaque exécution du même programme.
diff --git a/so3/arch/arm32/mmu.c b/so3/arch/arm32/mmu.c
index a6205ae..930bc1a 100644
--- a/so3/arch/arm32/mmu.c
+++ b/so3/arch/arm32/mmu.c
@@ -640,6 +640,6 @@ addr_t virt_to_phys_pt(addr_t vaddr) {
 
 // LEI: 2021_lab05
 uint32_t do_translate(uint32_t vaddr) {
-	return 0; //TO COMPLETE
+	return virt_to_phys_pt(vaddr);
 }
 
diff --git a/usr/src/memory.c b/usr/src/memory.c
index 1caa3b6..3130284 100644
--- a/usr/src/memory.c
+++ b/usr/src/memory.c
@@ -7,7 +7,17 @@
 int main(int argc, char **argv) {
     uint8_t *buffer;
 
-    // TO COMPLETE
+    buffer = (uint8_t*) malloc(4096);
+
+    if(buffer == NULL){
+        perror("Error in memory allocation!");
+        return EXIT_FAILURE;
+    }
+
+    printf("Adresse virtuelle : %p\n", buffer);
+    printf("Adresse physique : %p\n", sys_translate((uint32_t)buffer));
+
+    free(buffer);
 
     return EXIT_SUCCESS;
 }
-- 
GitLab

